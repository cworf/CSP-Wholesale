/*!
 * eventie v1.0.3
 * event binding helper
 *   eventie.bind( elem, 'click', myFn )
 *   eventie.unbind( elem, 'click', myFn )
 */

/*jshint browser: true, undef: true, unused: true */
/*global define: false */

( function( window ) {

    'use strict';

    var docElem = document.documentElement;

    var bind = function() {};

    if ( docElem.addEventListener ) {
        bind = function( obj, type, fn ) {
            obj.addEventListener( type, fn, false );
        };
    } else if ( docElem.attachEvent ) {
        bind = function( obj, type, fn ) {
            obj[ type + fn ] = fn.handleEvent ?
                function() {
                    var event = window.event;
                    // add event.target
                    event.target = event.target || event.srcElement;
                    fn.handleEvent.call( fn, event );
                } :
                function() {
                    var event = window.event;
                    // add event.target
                    event.target = event.target || event.srcElement;
                    fn.call( obj, event );
                };
            obj.attachEvent( "on" + type, obj[ type + fn ] );
        };
    }

    var unbind = function() {};

    if ( docElem.removeEventListener ) {
        unbind = function( obj, type, fn ) {
            obj.removeEventListener( type, fn, false );
        };
    } else if ( docElem.detachEvent ) {
        unbind = function( obj, type, fn ) {
            obj.detachEvent( "on" + type, obj[ type + fn ] );
            try {
                delete obj[ type + fn ];
            } catch ( err ) {
                // can't delete window object properties
                obj[ type + fn ] = undefined;
            }
        };
    }

    var eventie = {
        bind: bind,
        unbind: unbind
    };

// transport
    if ( typeof define === 'function' && define.amd ) {
        // AMD
        define( eventie );
    } else {
        // browser global
        window.eventie = eventie;
    }

})( this );

/*!
 * EventEmitter v4.2.0 - git.io/ee
 * Oliver Caldwell
 * MIT license
 * @preserve
 */
!function(){"use strict";function t(){}function n(t,n){for(var e=t.length;e--;)if(t[e].listener===n)return e;return-1}var e=t.prototype;e.getListeners=function(n){var r,e,t=this._getEvents();if("object"==typeof n){r={};for(e in t)t.hasOwnProperty(e)&&n.test(e)&&(r[e]=t[e])}else r=t[n]||(t[n]=[]);return r},e.flattenListeners=function(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push(t[e].listener);return n},e.getListenersAsObject=function(n){var e,t=this.getListeners(n);return t instanceof Array&&(e={},e[n]=t),e||t},e.addListener=function(i,e){var t,r=this.getListenersAsObject(i),s="object"==typeof e;for(t in r)r.hasOwnProperty(t)&&-1===n(r[t],e)&&r[t].push(s?e:{listener:e,once:!1});return this},e.on=e.addListener,e.addOnceListener=function(e,t){return this.addListener(e,{listener:t,once:!0})},e.once=e.addOnceListener,e.defineEvent=function(e){return this.getListeners(e),this},e.defineEvents=function(t){for(var e=0;e<t.length;e+=1)this.defineEvent(t[e]);return this},e.removeListener=function(i,s){var r,e,t=this.getListenersAsObject(i);for(e in t)t.hasOwnProperty(e)&&(r=n(t[e],s),-1!==r&&t[e].splice(r,1));return this},e.off=e.removeListener,e.addListeners=function(e,t){return this.manipulateListeners(!1,e,t)},e.removeListeners=function(e,t){return this.manipulateListeners(!0,e,t)},e.manipulateListeners=function(r,t,i){var e,n,s=r?this.removeListener:this.addListener,o=r?this.removeListeners:this.addListeners;if("object"!=typeof t||t instanceof RegExp)for(e=i.length;e--;)s.call(this,t,i[e]);else for(e in t)t.hasOwnProperty(e)&&(n=t[e])&&("function"==typeof n?s.call(this,e,n):o.call(this,e,n));return this},e.removeEvent=function(n){var e,r=typeof n,t=this._getEvents();if("string"===r)delete t[n];else if("object"===r)for(e in t)t.hasOwnProperty(e)&&n.test(e)&&delete t[e];else delete this._events;return this},e.emitEvent=function(i,o){var r,n,e,s,t=this.getListenersAsObject(i);for(e in t)if(t.hasOwnProperty(e))for(n=t[e].length;n--;)r=t[e][n],s=r.listener.apply(this,o||[]),(s===this._getOnceReturnValue()||r.once===!0)&&this.removeListener(i,t[e][n].listener);return this},e.trigger=e.emitEvent,e.emit=function(e){var t=Array.prototype.slice.call(arguments,1);return this.emitEvent(e,t)},e.setOnceReturnValue=function(e){return this._onceReturnValue=e,this},e._getOnceReturnValue=function(){return this.hasOwnProperty("_onceReturnValue")?this._onceReturnValue:!0},e._getEvents=function(){return this._events||(this._events={})},"function"==typeof define&&define.amd?define(function(){return t}):"undefined"!=typeof module&&module.exports?module.exports=t:this.EventEmitter=t}.call(this);

/**
 * jQuery Masonry v2.1.05
 * A dynamic layout plugin for jQuery
 * The flip-side of CSS Floats
 * http://masonry.desandro.com
 *
 * Licensed under the MIT license.
 * Copyright 2012 David DeSandro
 */
(function(a,b,c){"use strict";var d=b.event,e;d.special.smartresize={setup:function(){b(this).bind("resize",d.special.smartresize.handler)},teardown:function(){b(this).unbind("resize",d.special.smartresize.handler)},handler:function(a,c){var d=this,f=arguments;a.type="smartresize",e&&clearTimeout(e),e=setTimeout(function(){b.event.handle.apply(d,f)},c==="execAsap"?0:100)}},b.fn.smartresize=function(a){return a?this.bind("smartresize",a):this.trigger("smartresize",["execAsap"])},b.Mason=function(a,c){this.element=b(c),this._create(a),this._init()},b.Mason.settings={isResizable:!0,isAnimated:!1,animationOptions:{queue:!1,duration:500},gutterWidth:0,isRTL:!1,isFitWidth:!1,containerStyle:{position:"relative"}},b.Mason.prototype={_filterFindBricks:function(a){var b=this.options.itemSelector;return b?a.filter(b).add(a.find(b)):a},_getBricks:function(a){var b=this._filterFindBricks(a).css({position:"absolute"}).addClass("masonry-brick");return b},_create:function(c){this.options=b.extend(!0,{},b.Mason.settings,c),this.styleQueue=[];var d=this.element[0].style;this.originalStyle={height:d.height||""};var e=this.options.containerStyle;for(var f in e)this.originalStyle[f]=d[f]||"";this.element.css(e),this.horizontalDirection=this.options.isRTL?"right":"left",this.offset={x:parseInt(this.element.css("padding-"+this.horizontalDirection),10),y:parseInt(this.element.css("padding-top"),10)},this.isFluid=this.options.columnWidth&&typeof this.options.columnWidth=="function";var g=this;setTimeout(function(){g.element.addClass("masonry")},0),this.options.isResizable&&b(a).bind("smartresize.masonry",function(){g.resize()}),this.reloadItems()},_init:function(a){this._getColumns(),this._reLayout(a)},option:function(a,c){b.isPlainObject(a)&&(this.options=b.extend(!0,this.options,a))},layout:function(a,b){for(var c=0,d=a.length;c<d;c++)this._placeBrick(a[c]);var e={};e.height=Math.max.apply(Math,this.colYs);if(this.options.isFitWidth){var f=0;c=this.cols;while(--c){if(this.colYs[c]!==0)break;f++}e.width=(this.cols-f)*this.columnWidth-this.options.gutterWidth}this.styleQueue.push({$el:this.element,style:e});var g=this.isLaidOut?this.options.isAnimated?"animate":"css":"css",h=this.options.animationOptions,i;for(c=0,d=this.styleQueue.length;c<d;c++)i=this.styleQueue[c],i.$el[g](i.style,h);this.styleQueue=[],b&&b.call(a),this.isLaidOut=!0},_getColumns:function(){var a=this.options.isFitWidth?this.element.parent():this.element,b=a.width();this.columnWidth=this.isFluid?this.options.columnWidth(b):this.options.columnWidth||this.$bricks.outerWidth(!0)||b,this.columnWidth+=this.options.gutterWidth,this.cols=Math.floor((b+this.options.gutterWidth)/this.columnWidth),this.cols=Math.max(this.cols,1)},_placeBrick:function(a){var c=b(a),d,e,f,g,h;d=Math.ceil(c.outerWidth(!0)/this.columnWidth),d=Math.min(d,this.cols);if(d===1)f=this.colYs;else{e=this.cols+1-d,f=[];for(h=0;h<e;h++)g=this.colYs.slice(h,h+d),f[h]=Math.max.apply(Math,g)}var i=Math.min.apply(Math,f),j=0;for(var k=0,l=f.length;k<l;k++)if(f[k]===i){j=k;break}var m={top:i+this.offset.y};m[this.horizontalDirection]=this.columnWidth*j+this.offset.x,this.styleQueue.push({$el:c,style:m});var n=i+c.outerHeight(!0),o=this.cols+1-l;for(k=0;k<o;k++)this.colYs[j+k]=n},resize:function(){var a=this.cols;this._getColumns(),(this.isFluid||this.cols!==a)&&this._reLayout()},_reLayout:function(a){var b=this.cols;this.colYs=[];while(b--)this.colYs.push(0);this.layout(this.$bricks,a)},reloadItems:function(){this.$bricks=this._getBricks(this.element.children())},reload:function(a){this.reloadItems(),this._init(a)},appended:function(a,b,c){if(b){this._filterFindBricks(a).css({top:this.element.height()});var d=this;setTimeout(function(){d._appended(a,c)},1)}else this._appended(a,c)},_appended:function(a,b){var c=this._getBricks(a);this.$bricks=this.$bricks.add(c),this.layout(c,b)},remove:function(a){this.$bricks=this.$bricks.not(a),a.remove()},destroy:function(){this.$bricks.removeClass("masonry-brick").each(function(){this.style.position="",this.style.top="",this.style.left=""});var c=this.element[0].style;for(var d in this.originalStyle)c[d]=this.originalStyle[d];this.element.unbind(".masonry").removeClass("masonry").removeData("masonry"),b(a).unbind(".masonry")}};var f=function(b){a.console&&a.console.error(b)};b.fn.a13masonry=function(a){if(typeof a=="string"){var c=Array.prototype.slice.call(arguments,1);this.each(function(){var d=b.data(this,"masonry");if(!d){f("cannot call methods on masonry prior to initialization; attempted to call method '"+a+"'");return}if(!b.isFunction(d[a])||a.charAt(0)==="_"){f("no such method '"+a+"' for masonry instance");return}d[a].apply(d,c)})}else this.each(function(){var c=b.data(this,"masonry");c?(c.option(a||{}),c._init()):b.data(this,"masonry",new b.Mason(a,this))});return this}
;

    /*!
     * imagesLoaded v3.0.4
     * JavaScript is all like "You images are done yet or what?"
     * MIT License
     */

    ( function( window ) {

        'use strict';

        var $ = window.jQuery;
        var console = window.console;
        var hasConsole = typeof console !== 'undefined';

// -------------------------- helpers -------------------------- //

// extend objects
        function extend( a, b ) {
            for ( var prop in b ) {
                a[ prop ] = b[ prop ];
            }
            return a;
        }

        var objToString = Object.prototype.toString;
        function isArray( obj ) {
            return objToString.call( obj ) === '[object Array]';
        }

// turn element or nodeList into an array
        function makeArray( obj ) {
            var ary = [];
            if ( isArray( obj ) ) {
                // use object if already an array
                ary = obj;
            } else if ( typeof obj.length === 'number' ) {
                // convert nodeList to array
                for ( var i=0, len = obj.length; i < len; i++ ) {
                    ary.push( obj[i] );
                }
            } else {
                // array of single index
                ary.push( obj );
            }
            return ary;
        }

// --------------------------  -------------------------- //

        function defineImagesLoaded( EventEmitter, eventie ) {

            /**
             * @param {Array, Element, NodeList, String} elem
             * @param {Object or Function} options - if function, use as callback
             * @param {Function} onAlways - callback function
             */
            function ImagesLoaded( elem, options, onAlways ) {
                // coerce ImagesLoaded() without new, to be new ImagesLoaded()
                if ( !( this instanceof ImagesLoaded ) ) {
                    return new ImagesLoaded( elem, options );
                }
                // use elem as selector string
                if ( typeof elem === 'string' ) {
                    elem = document.querySelectorAll( elem );
                }

                this.elements = makeArray( elem );
                this.options = extend( {}, this.options );

                if ( typeof options === 'function' ) {
                    onAlways = options;
                } else {
                    extend( this.options, options );
                }

                if ( onAlways ) {
                    this.on( 'always', onAlways );
                }

                this.getImages();

                if ( $ ) {
                    // add jQuery Deferred object
                    this.jqDeferred = new $.Deferred();
                }

                // HACK check async to allow time to bind listeners
                var _this = this;
                setTimeout( function() {
                    _this.check();
                });
            }

            ImagesLoaded.prototype = new EventEmitter();

            ImagesLoaded.prototype.options = {};

            ImagesLoaded.prototype.getImages = function() {
                this.images = [];

                // filter & find items if we have an item selector
                for ( var i=0, len = this.elements.length; i < len; i++ ) {
                    var elem = this.elements[i];
                    // filter siblings
                    if ( elem.nodeName === 'IMG' ) {
                        this.addImage( elem );
                    }
                    // find children
                    var childElems = elem.querySelectorAll('img');
                    // concat childElems to filterFound array
                    for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {
                        var img = childElems[j];
                        this.addImage( img );
                    }
                }
            };

            /**
             * @param {Image} img
             */
            ImagesLoaded.prototype.addImage = function( img ) {
                var loadingImage = new LoadingImage( img );
                this.images.push( loadingImage );
            };

            ImagesLoaded.prototype.check = function() {
                var _this = this;
                var checkedCount = 0;
                var length = this.images.length;
                this.hasAnyBroken = false;
                // complete if no images
                if ( !length ) {
                    this.complete();
                    return;
                }

                function onConfirm( image, message ) {
                    if ( _this.options.debug && hasConsole ) {
                        console.log( 'confirm', image, message );
                    }

                    _this.progress( image );
                    checkedCount++;
                    if ( checkedCount === length ) {
                        _this.complete();
                    }
                    return true; // bind once
                }

                for ( var i=0; i < length; i++ ) {
                    var loadingImage = this.images[i];
                    loadingImage.on( 'confirm', onConfirm );
                    loadingImage.check();
                }
            };

            ImagesLoaded.prototype.progress = function( image ) {
                this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
                // HACK - Chrome triggers event before object properties have changed. #83
                var _this = this;
                setTimeout( function() {
                    _this.emit( 'progress', _this, image );
                    if ( _this.jqDeferred ) {
                        _this.jqDeferred.notify( _this, image );
                    }
                });
            };

            ImagesLoaded.prototype.complete = function() {
                var eventName = this.hasAnyBroken ? 'fail' : 'done';
                this.isComplete = true;
                var _this = this;
                // HACK - another setTimeout so that confirm happens after progress
                setTimeout( function() {
                    _this.emit( eventName, _this );
                    _this.emit( 'always', _this );
                    if ( _this.jqDeferred ) {
                        var jqMethod = _this.hasAnyBroken ? 'reject' : 'resolve';
                        _this.jqDeferred[ jqMethod ]( _this );
                    }
                });
            };

            // -------------------------- jquery -------------------------- //

            if ( $ ) {
                $.fn.imagesLoaded = function( options, callback ) {
                    var instance = new ImagesLoaded( this, options, callback );
                    return instance.jqDeferred.promise( $(this) );
                };
            }


            // --------------------------  -------------------------- //

            var cache = {};

            function LoadingImage( img ) {
                this.img = img;
            }

            LoadingImage.prototype = new EventEmitter();

            LoadingImage.prototype.check = function() {
                // first check cached any previous images that have same src
                var cached = cache[ this.img.src ];
                if ( cached ) {
                    this.useCached( cached );
                    return;
                }
                // add this to cache
                cache[ this.img.src ] = this;

                // If complete is true and browser supports natural sizes,
                // try to check for image status manually.
                if ( this.img.complete && this.img.naturalWidth !== undefined ) {
                    // report based on naturalWidth
                    this.confirm( this.img.naturalWidth !== 0, 'naturalWidth' );
                    return;
                }

                // If none of the checks above matched, simulate loading on detached element.
                var proxyImage = this.proxyImage = new Image();
                eventie.bind( proxyImage, 'load', this );
                eventie.bind( proxyImage, 'error', this );
                proxyImage.src = this.img.src;
            };

            LoadingImage.prototype.useCached = function( cached ) {
                if ( cached.isConfirmed ) {
                    this.confirm( cached.isLoaded, 'cached was confirmed' );
                } else {
                    var _this = this;
                    cached.on( 'confirm', function( image ) {
                        _this.confirm( image.isLoaded, 'cache emitted confirmed' );
                        return true; // bind once
                    });
                }
            };

            LoadingImage.prototype.confirm = function( isLoaded, message ) {
                this.isConfirmed = true;
                this.isLoaded = isLoaded;
                this.emit( 'confirm', this, message );
            };

            // trigger specified handler for event type
            LoadingImage.prototype.handleEvent = function( event ) {
                var method = 'on' + event.type;
                if ( this[ method ] ) {
                    this[ method ]( event );
                }
            };

            LoadingImage.prototype.onload = function() {
                this.confirm( true, 'onload' );
                this.unbindProxyEvents();
            };

            LoadingImage.prototype.onerror = function() {
                this.confirm( false, 'onerror' );
                this.unbindProxyEvents();
            };

            LoadingImage.prototype.unbindProxyEvents = function() {
                eventie.unbind( this.proxyImage, 'load', this );
                eventie.unbind( this.proxyImage, 'error', this );
            };

            // -----  ----- //

            return ImagesLoaded;
        }

// -------------------------- transport -------------------------- //

        if ( typeof define === 'function' && define.amd ) {
            // AMD
            define( [
                'eventEmitter/EventEmitter',
                'eventie/eventie'
            ],
                defineImagesLoaded );
        } else {
            // browser global
            window.imagesLoaded = defineImagesLoaded(
                window.EventEmitter,
                window.eventie
            );
        }

    })( window );

})(window,jQuery);